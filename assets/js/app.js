function generatePDF(saleId) {
  fetch(`${BASE_URL}/api/view_sale_details.php?id=${saleId}`)
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        alert("Error: " + data.error);
        return;
      }

      const doc = new jspdf.jsPDF();

      // Set Title
      doc.setFont("helvetica", "bold");
      doc.setFontSize(16);
      doc.text("Sales Report", 105, 20, { align: "center" });

      // Sale Information
      doc.setFontSize(12);
      let y = 40;
      doc.text(`Client Name: ${data.client_name}`, 20, y);
      y += 8;
      doc.text(`Email: ${data.email}`, 20, y);
      y += 8;
      doc.text(`Phone: ${data.phone}`, 20, y);
      y += 8;
      doc.text(`Sale Date: ${data.sale_date}`, 20, y);
      y += 12;

      // Table Data
      const tableData = [
        [
          data.product_name,
          data.category,
          data.quantity,
          `$${data.unit_price}`,
          `$${data.discount}`,
          `$${data.total}`,
        ],
      ];

      // Table Headers
      const headers = [
        "Product",
        "Category",
        "Quantity",
        "Unit Price",
        "Discount",
        "Total",
      ];

      // Generate the table using jspdf-autotable
      doc.autoTable({
        startY: y,
        head: [headers],
        body: tableData,
        theme: "striped",
        styles: { font: "helvetica", fontSize: 10 },
        columnStyles: {
          0: { cellWidth: 40 },
          1: { cellWidth: 30 },
          2: { cellWidth: 20 },
          3: { cellWidth: 30 },
          4: { cellWidth: 30 },
          5: { cellWidth: 30 },
        },
      });

      // Footer
      const finalY = doc.lastAutoTable.finalY + 10;
      doc.setFont("helvetica", "italic");
      doc.setFontSize(10);
      doc.text("Generated by Makamithi Sales System", 105, finalY, {
        align: "center",
      });

      // Save PDF
      doc.save(`Sale_Report_${saleId}.pdf`);
    })
    .catch((error) => console.error("Error fetching data:", error));
}
document.addEventListener('DOMContentLoaded', function() {
  // Mobile menu elements
  const mobileMenuButton = document.getElementById('mobile-menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  const backdrop = document.getElementById('mobile-menu-backdrop');
  const backButton = document.getElementById('mobile-menu-back');

  // Function to close the mobile menu
  const closeMobileMenu = () => {
    mobileMenu.classList.add('hidden');
  };

  // Toggle mobile menu
  mobileMenuButton.addEventListener('click', function() {
    mobileMenu.classList.toggle('hidden');
  });

  // Close menu when clicking the back button
  backButton.addEventListener('click', closeMobileMenu);

  // Close menu when clicking the backdrop
  backdrop.addEventListener('click', closeMobileMenu);

  // Close menu when pressing escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
      closeMobileMenu();
    }
  });

  // Dropdown toggles
  const dropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
  
  dropdownToggles.forEach(toggle => {
    toggle.addEventListener('click', function(e) {
      // Prevent the click from bubbling up to the document
      e.stopPropagation();
      
      // Toggle the dropdown visibility
      const dropdownContent = this.nextElementSibling;
      dropdownContent.classList.toggle('hidden');
      
      // Rotate the arrow icon
      const arrow = this.querySelector('svg');
      arrow.classList.toggle('rotate-180');
    });
  });

  // Prevent clicks inside the menu from closing it
  mobileMenu.querySelector('.fixed.inset-y-0').addEventListener('click', function(e) {
    e.stopPropagation();
  });
});
  function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i <ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}
function setCookie(cname, cvalue, exdays) {
  const d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  let expires = "expires="+ d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}